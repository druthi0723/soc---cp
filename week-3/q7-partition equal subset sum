class Solution {
public:
  bool f(int ind, int tar, vector<vector<int>> &dp, vector<int> &arr) {
    if (tar == 0) return true;
    if (ind == 0) return arr[0] == tar;
    
    if (dp[ind][tar] != -1) return dp[ind][tar];

    bool not_take = f(ind - 1, tar, dp, arr);
    bool take = false;
    if (arr[ind] <= tar)
        take = f(ind - 1, tar - arr[ind], dp, arr);

    return dp[ind][tar] = take || not_take;
};

    bool canPartition(vector<int>& nums) {
        int sum=0;
        int n=nums.size();
        for(int i=0;i<n;i++){
            sum+=nums[i];
        };
        if(sum%2)return false;
        int tar=sum/2;
        vector<vector<int>>dp(n,vector<int>(tar+1,-1));
    return f(n - 1, tar, dp, nums);
};

    };


