#include <vector>
#include <stack>
using namespace std;

class Solution {
public:
    long long subArrayRanges(vector<int>& nums) {
        int n = nums.size();
        vector<int> prev_g(n, -1), next_ge(n, n);
        vector<int> prev_s(n, -1), next_le(n, n);
        stack<int> st;

        // Compute previous greater elements for max sum
        for (int i = 0; i < n; ++i) {
            while (!st.empty() && nums[st.top()] <= nums[i]) {
                st.pop();
            }
            prev_g[i] = st.empty() ? -1 : st.top();
            st.push(i);
        }

        while (!st.empty()) st.pop();

        // Compute next greater or equal elements for max sum
        for (int i = n - 1; i >= 0; --i) {
            while (!st.empty() && nums[st.top()] < nums[i]) {
                st.pop();
            }
            next_ge[i] = st.empty() ? n : st.top();
            st.push(i);
        }

        // Compute sum of maxima
        long long sum_max = 0;
        for (int i = 0; i < n; ++i) {
            long long count = (i - prev_g[i]) * (next_ge[i] - i);
            sum_max += nums[i] * count;
        }

        // Compute previous smaller elements for min sum
        while (!st.empty()) st.pop();
        for (int i = 0; i < n; ++i) {
            while (!st.empty() && nums[st.top()] >= nums[i]) {
                st.pop();
            }
            prev_s[i] = st.empty() ? -1 : st.top();
            st.push(i);
        }

        while (!st.empty()) st.pop();

        // Compute next smaller or equal elements for min sum
        for (int i = n - 1; i >= 0; --i) {
            while (!st.empty() && nums[st.top()] > nums[i]) {
                st.pop();
            }
            next_le[i] = st.empty() ? n : st.top();
            st.push(i);
        }

        // Compute sum of minima
        long long sum_min = 0;
        for (int i = 0; i < n; ++i) {
            long long count = (i - prev_s[i]) * (next_le[i] - i);
            sum_min += nums[i] * count;
        }

        return sum_max - sum_min;
    }
};
